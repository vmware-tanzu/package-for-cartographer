apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: clusterconfigtemplates.carto.run
  labels:
    app.kubernetes.io/component: cartographer
spec:
  group: carto.run
  names:
    kind: ClusterConfigTemplate
    listKind: ClusterConfigTemplateList
    plural: clusterconfigtemplates
    shortNames:
      - cct
    singular: clusterconfigtemplate
  scope: Cluster
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: 'Spec describes the config template. More info: https://cartographer.sh/docs/latest/reference/template/#clusterconfigtemplate'
              properties:
                configPath:
                  description: 'ConfigPath is a path into the templated object''s data that contains valid yaml. This is typically the information that will configure the components of the deployable image. ConfigPath is specified in jsonpath format, eg: .data'
                  type: string
                healthRule:
                  description: 'HealthRule specifies rubric for determining the health of a resource stamped by this template. See: https://cartographer.sh/docs/latest/health-rules/'
                  properties:
                    alwaysHealthy:
                      description: AlwaysHealthy being set indicates the resource should always be considered healthy once it exists.
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    multiMatch:
                      description: MultiMatch specifies explicitly which conditions and/or fields should be used to determine healthiness.
                      properties:
                        healthy:
                          description: Healthy is a HealthMatchRule which stipulates requirements, ALL of which must be met for the resource to be considered healthy.
                          properties:
                            matchConditions:
                              description: MatchConditions are the conditions and statuses to read.
                              items:
                                properties:
                                  status:
                                    description: Status is the status of the condition
                                    type: string
                                  type:
                                    description: Type is the type of the condition
                                    type: string
                                required:
                                  - status
                                  - type
                                type: object
                              type: array
                            matchFields:
                              description: MatchFields stipulates a FieldSelectorRequirement for this rule.
                              items:
                                properties:
                                  key:
                                    description: 'Key is the JSON path in the workload to match against. e.g. for workload: "workload.spec.source.git.url", e.g. for deliverable: "deliverable.spec.source.git.url"'
                                    minLength: 1
                                    type: string
                                  messagePath:
                                    description: MessagePath is specified in jsonpath format. It is evaluated against the resource to provide a message in the owner's resource condition if it is the first matching requirement that determine the current ResourcesHealthy condition status.
                                    type: string
                                  operator:
                                    description: Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    enum:
                                      - In
                                      - NotIn
                                      - Exists
                                      - DoesNotExist
                                    type: string
                                  values:
                                    description: Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.
                                    items:
                                      type: string
                                    type: array
                                required:
                                  - key
                                  - operator
                                type: object
                              type: array
                          type: object
                        unhealthy:
                          description: Unhealthy is a HealthMatchRule which stipulates requirements, ANY of which, when met, indicate that the resource should be considered unhealthy.
                          properties:
                            matchConditions:
                              description: MatchConditions are the conditions and statuses to read.
                              items:
                                properties:
                                  status:
                                    description: Status is the status of the condition
                                    type: string
                                  type:
                                    description: Type is the type of the condition
                                    type: string
                                required:
                                  - status
                                  - type
                                type: object
                              type: array
                            matchFields:
                              description: MatchFields stipulates a FieldSelectorRequirement for this rule.
                              items:
                                properties:
                                  key:
                                    description: 'Key is the JSON path in the workload to match against. e.g. for workload: "workload.spec.source.git.url", e.g. for deliverable: "deliverable.spec.source.git.url"'
                                    minLength: 1
                                    type: string
                                  messagePath:
                                    description: MessagePath is specified in jsonpath format. It is evaluated against the resource to provide a message in the owner's resource condition if it is the first matching requirement that determine the current ResourcesHealthy condition status.
                                    type: string
                                  operator:
                                    description: Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    enum:
                                      - In
                                      - NotIn
                                      - Exists
                                      - DoesNotExist
                                    type: string
                                  values:
                                    description: Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.
                                    items:
                                      type: string
                                    type: array
                                required:
                                  - key
                                  - operator
                                type: object
                              type: array
                          type: object
                      required:
                        - healthy
                        - unhealthy
                      type: object
                    singleConditionType:
                      description: SingleConditionType names a single condition which, when True indicates the resource is healthy. When False it is unhealthy. Otherwise, healthiness is Unknown.
                      type: string
                  type: object
                lifecycle:
                  default: mutable
                  description: 'Lifecycle specifies whether template modifications should result in originally created objects being updated (`mutable`) or in new objects created alongside original objects (`immutable` or `tekton`). See: https://cartographer.sh/docs/latest/lifecycle/'
                  enum:
                    - mutable
                    - immutable
                    - tekton
                  type: string
                params:
                  description: 'Additional parameters. See: https://cartographer.sh/docs/latest/architecture/#parameter-hierarchy'
                  items:
                    properties:
                      default:
                        description: DefaultValue of the parameter. Causes the parameter to be optional; If the Owner or Template does not specify this parameter, this value is used.
                        x-kubernetes-preserve-unknown-fields: true
                      name:
                        description: Name of a parameter the template accepts from the Blueprint or Owner.
                        type: string
                    required:
                      - default
                      - name
                    type: object
                  type: array
                retentionPolicy:
                  description: 'RetentionPolicy specifies how many successful and failed runs should be retained if the template lifecycle is immutable/tekton. Runs older than this (ordered by creation time) will be deleted. Setting higher values will increase memory footprint. If unspecified on immutable/tekton, default behavior will == {maxFailedRuns: 10, maxSuccessfulRuns: 10}'
                  properties:
                    maxFailedRuns:
                      description: MaxFailedRuns is the number of failed runs to retain.
                      format: int64
                      minimum: 1
                      type: integer
                    maxSuccessfulRuns:
                      description: MaxSuccessfulRuns is the number of successful runs to retain.
                      format: int64
                      minimum: 1
                      type: integer
                  required:
                    - maxFailedRuns
                    - maxSuccessfulRuns
                  type: object
                template:
                  description: 'Template defines a resource template for a Kubernetes Resource or Custom Resource which is applied to the server each time the blueprint is applied. Templates support simple value interpolation using the $()$ marker format. For more information, see: https://cartographer.sh/docs/latest/templating/ You cannot define both Template and Ytt at the same time. You should not define the namespace for the resource - it will automatically be created in the owner namespace. If the namespace is specified and is not the owner namespace, the resource will fail to be created.'
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                ytt:
                  description: 'Ytt defines a resource template written in `ytt` for a Kubernetes Resource or Custom Resource which is applied to the server each time the blueprint is applied. Templates support simple value interpolation using the $()$ marker format. For more information, see: https://cartographer.sh/docs/latest/templating/ You cannot define both Template and Ytt at the same time. You should not define the namespace for the resource - it will automatically be created in the owner namespace. If the namespace is specified and is not the owner namespace, the resource will fail to be created.'
                  type: string
              required:
                - configPath
              type: object
          required:
            - metadata
            - spec
          type: object
      served: true
      storage: true
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: clusterdeliveries.carto.run
  labels:
    app.kubernetes.io/component: cartographer
spec:
  group: carto.run
  names:
    kind: ClusterDelivery
    listKind: ClusterDeliveryList
    plural: clusterdeliveries
    shortNames:
      - cd
    singular: clusterdelivery
  scope: Cluster
  versions:
    - additionalPrinterColumns:
        - jsonPath: .status.conditions[?(@.type=='Ready')].status
          name: Ready
          type: string
        - jsonPath: .status.conditions[?(@.type=='Ready')].reason
          name: Reason
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1alpha1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: 'Spec describes the delivery. More info: https://cartographer.sh/docs/latest/reference/deliverable/#clusterdelivery'
              properties:
                params:
                  description: 'Additional parameters. See: https://cartographer.sh/docs/latest/architecture/#parameter-hierarchy'
                  items:
                    properties:
                      default:
                        description: DefaultValue of the parameter. Causes the parameter to be optional; If the Owner does not specify this parameter, this value is used.
                        x-kubernetes-preserve-unknown-fields: true
                      name:
                        description: Name of the parameter. Should match a template parameter name.
                        type: string
                      value:
                        description: Value of the parameter. If specified, owner properties are ignored.
                        x-kubernetes-preserve-unknown-fields: true
                    required:
                      - name
                    type: object
                  type: array
                resources:
                  description: Resources that are responsible for deploying and validating the deliverable
                  items:
                    properties:
                      configs:
                        description: "Configs is a list of references to other 'config' resources in this list. A config resource has the kind ClusterConfigTemplate \n In a template, configs can be consumed as: $(configs.<name>.config)$ \n If there is only one image, it can be consumed as: $(config)$"
                        items:
                          properties:
                            name:
                              type: string
                            resource:
                              type: string
                          required:
                            - name
                            - resource
                          type: object
                        type: array
                      deployment:
                        description: "Deployment is a reference to a 'deployment' resource. A deployment resource has the kind ClusterDeploymentTemplate \n In a template, the deployment can be consumed as: $(deployment.url)$ and $(deployment.revision)$"
                        properties:
                          resource:
                            type: string
                        required:
                          - resource
                        type: object
                      name:
                        description: Name of the resource. Used as a reference for inputs, as well as being the name presented in deliverable statuses to identify this resource.
                        type: string
                      params:
                        description: "Params are a list of parameters to provide to the template in TemplateRef Template params do not have to be specified here, unless you want to force a particular value, or add a default value. \n Parameters are consumed in a template with the syntax: $(params.<name>)$"
                        items:
                          properties:
                            default:
                              description: DefaultValue of the parameter. Causes the parameter to be optional; If the Owner does not specify this parameter, this value is used.
                              x-kubernetes-preserve-unknown-fields: true
                            name:
                              description: Name of the parameter. Should match a template parameter name.
                              type: string
                            value:
                              description: Value of the parameter. If specified, owner properties are ignored.
                              x-kubernetes-preserve-unknown-fields: true
                          required:
                            - name
                          type: object
                        type: array
                      sources:
                        description: "Sources is a list of references to other 'source' resources in this list. A source resource has the kind ClusterSourceTemplate or ClusterDeploymentTemplate \n In a template, sources can be consumed as: $(sources.<name>.url)$ and $(sources.<name>.revision)$ \n If there is only one source, it can be consumed as: $(source.url)$ and $(source.revision)$"
                        items:
                          properties:
                            name:
                              type: string
                            resource:
                              type: string
                          required:
                            - name
                            - resource
                          type: object
                        type: array
                      templateRef:
                        description: TemplateRef identifies the template used to produce this resource
                        properties:
                          kind:
                            description: Kind of the template to apply
                            enum:
                              - ClusterSourceTemplate
                              - ClusterDeploymentTemplate
                              - ClusterTemplate
                              - ClusterConfigTemplate
                            type: string
                          name:
                            description: Name of the template to apply
                            minLength: 1
                            type: string
                          options:
                            description: Options is a list of template names and Selector. The templates must all be of type Kind. A template will be selected if the deliverable matches the specified selector. Only one template can be selected. Only one of Name and Options can be specified.
                            items:
                              properties:
                                name:
                                  description: Name of the template to apply Name or PassThrough must be specified
                                  minLength: 1
                                  type: string
                                passThrough:
                                  description: PassThrough the input Name or PassThrough must be specified
                                  type: string
                                selector:
                                  description: Selector is a criteria to match against  a workload or deliverable resource.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      items:
                                        description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                        properties:
                                          key:
                                            description: key is the label key that the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                          - key
                                          - operator
                                        type: object
                                      type: array
                                    matchFields:
                                      description: MatchFields is a list of field selector requirements. The requirements are ANDed.
                                      items:
                                        properties:
                                          key:
                                            description: 'Key is the JSON path in the workload to match against. e.g. for workload: "workload.spec.source.git.url", e.g. for deliverable: "deliverable.spec.source.git.url"'
                                            minLength: 1
                                            type: string
                                          operator:
                                            description: Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                            enum:
                                              - In
                                              - NotIn
                                              - Exists
                                              - DoesNotExist
                                            type: string
                                          values:
                                            description: Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                          - key
                                          - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                              required:
                                - selector
                              type: object
                            minItems: 2
                            type: array
                        required:
                          - kind
                        type: object
                    required:
                      - name
                      - templateRef
                    type: object
                  type: array
                selector:
                  additionalProperties:
                    type: string
                  description: 'Specifies the label key-value pairs used to select owners See: https://cartographer.sh/docs/v0.1.0/architecture/#selectors'
                  type: object
                selectorMatchExpressions:
                  description: 'Specifies the requirements used to select owners based on their labels See: https://cartographer.sh/docs/v0.1.0/architecture/#selectors'
                  items:
                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                    properties:
                      key:
                        description: key is the label key that the selector applies to.
                        type: string
                      operator:
                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                        type: string
                      values:
                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                        items:
                          type: string
                        type: array
                    required:
                      - key
                      - operator
                    type: object
                  type: array
                selectorMatchFields:
                  description: 'Specifies the requirements used to select owners based on their fields See: https://cartographer.sh/docs/v0.1.0/architecture/#selectors'
                  items:
                    properties:
                      key:
                        description: 'Key is the JSON path in the workload to match against. e.g. for workload: "workload.spec.source.git.url", e.g. for deliverable: "deliverable.spec.source.git.url"'
                        minLength: 1
                        type: string
                      operator:
                        description: Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                        enum:
                          - In
                          - NotIn
                          - Exists
                          - DoesNotExist
                        type: string
                      values:
                        description: Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.
                        items:
                          type: string
                        type: array
                    required:
                      - key
                      - operator
                    type: object
                  type: array
                serviceAccountRef:
                  description: "ServiceAccountName refers to the Service account with permissions to create resources submitted by the supply chain. \n If not set, Cartographer will use serviceAccountName from supply chain. \n If that is also not set, Cartographer will use the default service account in the workload's namespace."
                  properties:
                    name:
                      description: Name of the service account being referred to
                      type: string
                    namespace:
                      description: Namespace of the service account being referred to if omitted, the Owner's namespace is used.
                      type: string
                  required:
                    - name
                  type: object
              required:
                - resources
              type: object
            status:
              description: 'Status conforms to the Kubernetes conventions: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties'
              properties:
                conditions:
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                    properties:
                      lastTransitionTime:
                        description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: message is a human readable message indicating details about the transition. This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
                observedGeneration:
                  format: int64
                  type: integer
              type: object
          required:
            - metadata
            - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: clusterdeploymenttemplates.carto.run
  labels:
    app.kubernetes.io/component: cartographer
spec:
  group: carto.run
  names:
    kind: ClusterDeploymentTemplate
    listKind: ClusterDeploymentTemplateList
    plural: clusterdeploymenttemplates
    shortNames:
      - cdt
    singular: clusterdeploymenttemplate
  scope: Cluster
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: 'Spec describes the deployment template. More info: https://cartographer.sh/docs/latest/reference/template/#clusterdeploymenttemplate'
              properties:
                healthRule:
                  description: 'HealthRule specifies rubric for determining the health of a resource stamped by this template. See: https://cartographer.sh/docs/latest/health-rules/'
                  properties:
                    alwaysHealthy:
                      description: AlwaysHealthy being set indicates the resource should always be considered healthy once it exists.
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    multiMatch:
                      description: MultiMatch specifies explicitly which conditions and/or fields should be used to determine healthiness.
                      properties:
                        healthy:
                          description: Healthy is a HealthMatchRule which stipulates requirements, ALL of which must be met for the resource to be considered healthy.
                          properties:
                            matchConditions:
                              description: MatchConditions are the conditions and statuses to read.
                              items:
                                properties:
                                  status:
                                    description: Status is the status of the condition
                                    type: string
                                  type:
                                    description: Type is the type of the condition
                                    type: string
                                required:
                                  - status
                                  - type
                                type: object
                              type: array
                            matchFields:
                              description: MatchFields stipulates a FieldSelectorRequirement for this rule.
                              items:
                                properties:
                                  key:
                                    description: 'Key is the JSON path in the workload to match against. e.g. for workload: "workload.spec.source.git.url", e.g. for deliverable: "deliverable.spec.source.git.url"'
                                    minLength: 1
                                    type: string
                                  messagePath:
                                    description: MessagePath is specified in jsonpath format. It is evaluated against the resource to provide a message in the owner's resource condition if it is the first matching requirement that determine the current ResourcesHealthy condition status.
                                    type: string
                                  operator:
                                    description: Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    enum:
                                      - In
                                      - NotIn
                                      - Exists
                                      - DoesNotExist
                                    type: string
                                  values:
                                    description: Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.
                                    items:
                                      type: string
                                    type: array
                                required:
                                  - key
                                  - operator
                                type: object
                              type: array
                          type: object
                        unhealthy:
                          description: Unhealthy is a HealthMatchRule which stipulates requirements, ANY of which, when met, indicate that the resource should be considered unhealthy.
                          properties:
                            matchConditions:
                              description: MatchConditions are the conditions and statuses to read.
                              items:
                                properties:
                                  status:
                                    description: Status is the status of the condition
                                    type: string
                                  type:
                                    description: Type is the type of the condition
                                    type: string
                                required:
                                  - status
                                  - type
                                type: object
                              type: array
                            matchFields:
                              description: MatchFields stipulates a FieldSelectorRequirement for this rule.
                              items:
                                properties:
                                  key:
                                    description: 'Key is the JSON path in the workload to match against. e.g. for workload: "workload.spec.source.git.url", e.g. for deliverable: "deliverable.spec.source.git.url"'
                                    minLength: 1
                                    type: string
                                  messagePath:
                                    description: MessagePath is specified in jsonpath format. It is evaluated against the resource to provide a message in the owner's resource condition if it is the first matching requirement that determine the current ResourcesHealthy condition status.
                                    type: string
                                  operator:
                                    description: Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    enum:
                                      - In
                                      - NotIn
                                      - Exists
                                      - DoesNotExist
                                    type: string
                                  values:
                                    description: Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.
                                    items:
                                      type: string
                                    type: array
                                required:
                                  - key
                                  - operator
                                type: object
                              type: array
                          type: object
                      required:
                        - healthy
                        - unhealthy
                      type: object
                    singleConditionType:
                      description: SingleConditionType names a single condition which, when True indicates the resource is healthy. When False it is unhealthy. Otherwise, healthiness is Unknown.
                      type: string
                  type: object
                lifecycle:
                  default: mutable
                  description: 'Lifecycle specifies whether template modifications should result in originally created objects being updated (`mutable`) or in new objects created alongside original objects (`immutable` or `tekton`). See: https://cartographer.sh/docs/latest/lifecycle/'
                  enum:
                    - mutable
                    - immutable
                    - tekton
                  type: string
                observedCompletion:
                  description: ObservedCompletion describe the criteria for determining that the templated object completed configuration of environment. These criteria assert completion when metadata.Generation and status.ObservedGeneration match, AND success or failure criteria match. Cannot specify both ObservedMatches and ObservedCompletion.
                  properties:
                    failed:
                      description: FailedCondition, when matched, indicates that the input did not deploy successfully.
                      properties:
                        key:
                          description: 'Key is a jsonPath expression pointing to the field to inspect on the templated object, eg: ''status.conditions[?(@.type=="Succeeded")].status'''
                          type: string
                        value:
                          description: Value is the expected value that, when matching the key's actual value, makes this condition true.
                          type: string
                      required:
                        - key
                        - value
                      type: object
                    succeeded:
                      description: SucceededCondition, when matched, indicates that the input was successfully deployed.
                      properties:
                        key:
                          description: 'Key is a jsonPath expression pointing to the field to inspect on the templated object, eg: ''status.conditions[?(@.type=="Succeeded")].status'''
                          type: string
                        value:
                          description: Value is the expected value that, when matching the key's actual value, makes this condition true.
                          type: string
                      required:
                        - key
                        - value
                      type: object
                  required:
                    - succeeded
                  type: object
                observedMatches:
                  description: ObservedMatches describe the criteria for determining that the templated object completed configuration of environment. These criteria assert completion when an output (usually a field in .status) matches an input (usually a field in .spec) Cannot specify both ObservedMatches and ObservedCompletion.
                  items:
                    properties:
                      input:
                        description: Input is a jsonPath to a value that is fulfilled before the templated object is reconciled. Usually a value in the .spec of the object
                        type: string
                      output:
                        description: Output is a jsonPath to a value that is fulfilled after the templated object is reconciled. Usually a value in the .status of the object
                        type: string
                    required:
                      - input
                      - output
                    type: object
                  type: array
                params:
                  description: 'Additional parameters. See: https://cartographer.sh/docs/latest/architecture/#parameter-hierarchy'
                  items:
                    properties:
                      default:
                        description: DefaultValue of the parameter. Causes the parameter to be optional; If the Owner or Template does not specify this parameter, this value is used.
                        x-kubernetes-preserve-unknown-fields: true
                      name:
                        description: Name of a parameter the template accepts from the Blueprint or Owner.
                        type: string
                    required:
                      - default
                      - name
                    type: object
                  type: array
                retentionPolicy:
                  description: 'RetentionPolicy specifies how many successful and failed runs should be retained if the template lifecycle is immutable/tekton. Runs older than this (ordered by creation time) will be deleted. Setting higher values will increase memory footprint. If unspecified on immutable/tekton, default behavior will == {maxFailedRuns: 10, maxSuccessfulRuns: 10}'
                  properties:
                    maxFailedRuns:
                      description: MaxFailedRuns is the number of failed runs to retain.
                      format: int64
                      minimum: 1
                      type: integer
                    maxSuccessfulRuns:
                      description: MaxSuccessfulRuns is the number of successful runs to retain.
                      format: int64
                      minimum: 1
                      type: integer
                  required:
                    - maxFailedRuns
                    - maxSuccessfulRuns
                  type: object
                template:
                  description: 'Template defines a resource template for a Kubernetes Resource or Custom Resource which is applied to the server each time the blueprint is applied. Templates support simple value interpolation using the $()$ marker format. For more information, see: https://cartographer.sh/docs/latest/templating/ You cannot define both Template and Ytt at the same time. You should not define the namespace for the resource - it will automatically be created in the owner namespace. If the namespace is specified and is not the owner namespace, the resource will fail to be created.'
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                ytt:
                  description: 'Ytt defines a resource template written in `ytt` for a Kubernetes Resource or Custom Resource which is applied to the server each time the blueprint is applied. Templates support simple value interpolation using the $()$ marker format. For more information, see: https://cartographer.sh/docs/latest/templating/ You cannot define both Template and Ytt at the same time. You should not define the namespace for the resource - it will automatically be created in the owner namespace. If the namespace is specified and is not the owner namespace, the resource will fail to be created.'
                  type: string
              type: object
          required:
            - metadata
            - spec
          type: object
      served: true
      storage: true
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: clusterimagetemplates.carto.run
  labels:
    app.kubernetes.io/component: cartographer
spec:
  group: carto.run
  names:
    kind: ClusterImageTemplate
    listKind: ClusterImageTemplateList
    plural: clusterimagetemplates
    shortNames:
      - cit
    singular: clusterimagetemplate
  scope: Cluster
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: 'Spec describes the image template. More info: https://cartographer.sh/docs/latest/reference/template/#clusterimagetemplate'
              properties:
                healthRule:
                  description: 'HealthRule specifies rubric for determining the health of a resource stamped by this template. See: https://cartographer.sh/docs/latest/health-rules/'
                  properties:
                    alwaysHealthy:
                      description: AlwaysHealthy being set indicates the resource should always be considered healthy once it exists.
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    multiMatch:
                      description: MultiMatch specifies explicitly which conditions and/or fields should be used to determine healthiness.
                      properties:
                        healthy:
                          description: Healthy is a HealthMatchRule which stipulates requirements, ALL of which must be met for the resource to be considered healthy.
                          properties:
                            matchConditions:
                              description: MatchConditions are the conditions and statuses to read.
                              items:
                                properties:
                                  status:
                                    description: Status is the status of the condition
                                    type: string
                                  type:
                                    description: Type is the type of the condition
                                    type: string
                                required:
                                  - status
                                  - type
                                type: object
                              type: array
                            matchFields:
                              description: MatchFields stipulates a FieldSelectorRequirement for this rule.
                              items:
                                properties:
                                  key:
                                    description: 'Key is the JSON path in the workload to match against. e.g. for workload: "workload.spec.source.git.url", e.g. for deliverable: "deliverable.spec.source.git.url"'
                                    minLength: 1
                                    type: string
                                  messagePath:
                                    description: MessagePath is specified in jsonpath format. It is evaluated against the resource to provide a message in the owner's resource condition if it is the first matching requirement that determine the current ResourcesHealthy condition status.
                                    type: string
                                  operator:
                                    description: Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    enum:
                                      - In
                                      - NotIn
                                      - Exists
                                      - DoesNotExist
                                    type: string
                                  values:
                                    description: Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.
                                    items:
                                      type: string
                                    type: array
                                required:
                                  - key
                                  - operator
                                type: object
                              type: array
                          type: object
                        unhealthy:
                          description: Unhealthy is a HealthMatchRule which stipulates requirements, ANY of which, when met, indicate that the resource should be considered unhealthy.
                          properties:
                            matchConditions:
                              description: MatchConditions are the conditions and statuses to read.
                              items:
                                properties:
                                  status:
                                    description: Status is the status of the condition
                                    type: string
                                  type:
                                    description: Type is the type of the condition
                                    type: string
                                required:
                                  - status
                                  - type
                                type: object
                              type: array
                            matchFields:
                              description: MatchFields stipulates a FieldSelectorRequirement for this rule.
                              items:
                                properties:
                                  key:
                                    description: 'Key is the JSON path in the workload to match against. e.g. for workload: "workload.spec.source.git.url", e.g. for deliverable: "deliverable.spec.source.git.url"'
                                    minLength: 1
                                    type: string
                                  messagePath:
                                    description: MessagePath is specified in jsonpath format. It is evaluated against the resource to provide a message in the owner's resource condition if it is the first matching requirement that determine the current ResourcesHealthy condition status.
                                    type: string
                                  operator:
                                    description: Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    enum:
                                      - In
                                      - NotIn
                                      - Exists
                                      - DoesNotExist
                                    type: string
                                  values:
                                    description: Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.
                                    items:
                                      type: string
                                    type: array
                                required:
                                  - key
                                  - operator
                                type: object
                              type: array
                          type: object
                      required:
                        - healthy
                        - unhealthy
                      type: object
                    singleConditionType:
                      description: SingleConditionType names a single condition which, when True indicates the resource is healthy. When False it is unhealthy. Otherwise, healthiness is Unknown.
                      type: string
                  type: object
                imagePath:
                  description: 'ImagePath is a path into the templated object''s data that contains a valid image digest. This might be a URL or in some cases just a repository path and digest. The final spec for this field may change as we implement RFC-0016 https://github.com/vmware-tanzu/cartographer/blob/main/rfc/rfc-0016-validate-template-outputs.md ImagePath is specified in jsonpath format, eg: .status.artifact.image_digest'
                  type: string
                lifecycle:
                  default: mutable
                  description: 'Lifecycle specifies whether template modifications should result in originally created objects being updated (`mutable`) or in new objects created alongside original objects (`immutable` or `tekton`). See: https://cartographer.sh/docs/latest/lifecycle/'
                  enum:
                    - mutable
                    - immutable
                    - tekton
                  type: string
                params:
                  description: 'Additional parameters. See: https://cartographer.sh/docs/latest/architecture/#parameter-hierarchy'
                  items:
                    properties:
                      default:
                        description: DefaultValue of the parameter. Causes the parameter to be optional; If the Owner or Template does not specify this parameter, this value is used.
                        x-kubernetes-preserve-unknown-fields: true
                      name:
                        description: Name of a parameter the template accepts from the Blueprint or Owner.
                        type: string
                    required:
                      - default
                      - name
                    type: object
                  type: array
                retentionPolicy:
                  description: 'RetentionPolicy specifies how many successful and failed runs should be retained if the template lifecycle is immutable/tekton. Runs older than this (ordered by creation time) will be deleted. Setting higher values will increase memory footprint. If unspecified on immutable/tekton, default behavior will == {maxFailedRuns: 10, maxSuccessfulRuns: 10}'
                  properties:
                    maxFailedRuns:
                      description: MaxFailedRuns is the number of failed runs to retain.
                      format: int64
                      minimum: 1
                      type: integer
                    maxSuccessfulRuns:
                      description: MaxSuccessfulRuns is the number of successful runs to retain.
                      format: int64
                      minimum: 1
                      type: integer
                  required:
                    - maxFailedRuns
                    - maxSuccessfulRuns
                  type: object
                template:
                  description: 'Template defines a resource template for a Kubernetes Resource or Custom Resource which is applied to the server each time the blueprint is applied. Templates support simple value interpolation using the $()$ marker format. For more information, see: https://cartographer.sh/docs/latest/templating/ You cannot define both Template and Ytt at the same time. You should not define the namespace for the resource - it will automatically be created in the owner namespace. If the namespace is specified and is not the owner namespace, the resource will fail to be created.'
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                ytt:
                  description: 'Ytt defines a resource template written in `ytt` for a Kubernetes Resource or Custom Resource which is applied to the server each time the blueprint is applied. Templates support simple value interpolation using the $()$ marker format. For more information, see: https://cartographer.sh/docs/latest/templating/ You cannot define both Template and Ytt at the same time. You should not define the namespace for the resource - it will automatically be created in the owner namespace. If the namespace is specified and is not the owner namespace, the resource will fail to be created.'
                  type: string
              required:
                - imagePath
              type: object
          required:
            - metadata
            - spec
          type: object
      served: true
      storage: true
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: clusterruntemplates.carto.run
  labels:
    app.kubernetes.io/component: cartographer
spec:
  group: carto.run
  names:
    kind: ClusterRunTemplate
    listKind: ClusterRunTemplateList
    plural: clusterruntemplates
    shortNames:
      - crt
    singular: clusterruntemplate
  scope: Cluster
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: 'Spec describes the run template. More info: https://cartographer.sh/docs/latest/reference/runnable/#clusterruntemplate'
              properties:
                outputs:
                  additionalProperties:
                    type: string
                  description: "Outputs are a named list of jsonPaths that are used to gather results from the last successful object stamped by the template. E.g: \tmy-output: .status.results[?(@.name==\"IMAGE-DIGEST\")].value Note: outputs are only filled on the runnable when the templated object has a Succeeded condition with a Status of True E.g:     status.conditions[?(@.type==\"Succeeded\")].status == True a runnable creating an object without a Succeeded condition (like a Job or ConfigMap) will never display an output"
                  type: object
                template:
                  description: 'Template defines a resource template for a Kubernetes Resource or Custom Resource which is applied to the server each time the blueprint is applied. Templates support simple value interpolation using the $()$ marker format. For more information, see: https://cartographer.sh/docs/latest/templating/ You should not define the namespace for the resource - it will automatically be created in the owner namespace. If the namespace is specified and is not the owner namespace, the resource will fail to be created.'
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
              required:
                - template
              type: object
          required:
            - metadata
            - spec
          type: object
      served: true
      storage: true
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: clustersourcetemplates.carto.run
  labels:
    app.kubernetes.io/component: cartographer
spec:
  group: carto.run
  names:
    kind: ClusterSourceTemplate
    listKind: ClusterSourceTemplateList
    plural: clustersourcetemplates
    shortNames:
      - cst
    singular: clustersourcetemplate
  scope: Cluster
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: 'Spec describes the source template. More info: https://cartographer.sh/docs/latest/reference/template/#clustersourcetemplate'
              properties:
                healthRule:
                  description: 'HealthRule specifies rubric for determining the health of a resource stamped by this template. See: https://cartographer.sh/docs/latest/health-rules/'
                  properties:
                    alwaysHealthy:
                      description: AlwaysHealthy being set indicates the resource should always be considered healthy once it exists.
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    multiMatch:
                      description: MultiMatch specifies explicitly which conditions and/or fields should be used to determine healthiness.
                      properties:
                        healthy:
                          description: Healthy is a HealthMatchRule which stipulates requirements, ALL of which must be met for the resource to be considered healthy.
                          properties:
                            matchConditions:
                              description: MatchConditions are the conditions and statuses to read.
                              items:
                                properties:
                                  status:
                                    description: Status is the status of the condition
                                    type: string
                                  type:
                                    description: Type is the type of the condition
                                    type: string
                                required:
                                  - status
                                  - type
                                type: object
                              type: array
                            matchFields:
                              description: MatchFields stipulates a FieldSelectorRequirement for this rule.
                              items:
                                properties:
                                  key:
                                    description: 'Key is the JSON path in the workload to match against. e.g. for workload: "workload.spec.source.git.url", e.g. for deliverable: "deliverable.spec.source.git.url"'
                                    minLength: 1
                                    type: string
                                  messagePath:
                                    description: MessagePath is specified in jsonpath format. It is evaluated against the resource to provide a message in the owner's resource condition if it is the first matching requirement that determine the current ResourcesHealthy condition status.
                                    type: string
                                  operator:
                                    description: Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    enum:
                                      - In
                                      - NotIn
                                      - Exists
                                      - DoesNotExist
                                    type: string
                                  values:
                                    description: Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.
                                    items:
                                      type: string
                                    type: array
                                required:
                                  - key
                                  - operator
                                type: object
                              type: array
                          type: object
                        unhealthy:
                          description: Unhealthy is a HealthMatchRule which stipulates requirements, ANY of which, when met, indicate that the resource should be considered unhealthy.
                          properties:
                            matchConditions:
                              description: MatchConditions are the conditions and statuses to read.
                              items:
                                properties:
                                  status:
                                    description: Status is the status of the condition
                                    type: string
                                  type:
                                    description: Type is the type of the condition
                                    type: string
                                required:
                                  - status
                                  - type
                                type: object
                              type: array
                            matchFields:
                              description: MatchFields stipulates a FieldSelectorRequirement for this rule.
                              items:
                                properties:
                                  key:
                                    description: 'Key is the JSON path in the workload to match against. e.g. for workload: "workload.spec.source.git.url", e.g. for deliverable: "deliverable.spec.source.git.url"'
                                    minLength: 1
                                    type: string
                                  messagePath:
                                    description: MessagePath is specified in jsonpath format. It is evaluated against the resource to provide a message in the owner's resource condition if it is the first matching requirement that determine the current ResourcesHealthy condition status.
                                    type: string
                                  operator:
                                    description: Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    enum:
                                      - In
                                      - NotIn
                                      - Exists
                                      - DoesNotExist
                                    type: string
                                  values:
                                    description: Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.
                                    items:
                                      type: string
                                    type: array
                                required:
                                  - key
                                  - operator
                                type: object
                              type: array
                          type: object
                      required:
                        - healthy
                        - unhealthy
                      type: object
                    singleConditionType:
                      description: SingleConditionType names a single condition which, when True indicates the resource is healthy. When False it is unhealthy. Otherwise, healthiness is Unknown.
                      type: string
                  type: object
                lifecycle:
                  default: mutable
                  description: 'Lifecycle specifies whether template modifications should result in originally created objects being updated (`mutable`) or in new objects created alongside original objects (`immutable` or `tekton`). See: https://cartographer.sh/docs/latest/lifecycle/'
                  enum:
                    - mutable
                    - immutable
                    - tekton
                  type: string
                params:
                  description: 'Additional parameters. See: https://cartographer.sh/docs/latest/architecture/#parameter-hierarchy'
                  items:
                    properties:
                      default:
                        description: DefaultValue of the parameter. Causes the parameter to be optional; If the Owner or Template does not specify this parameter, this value is used.
                        x-kubernetes-preserve-unknown-fields: true
                      name:
                        description: Name of a parameter the template accepts from the Blueprint or Owner.
                        type: string
                    required:
                      - default
                      - name
                    type: object
                  type: array
                retentionPolicy:
                  description: 'RetentionPolicy specifies how many successful and failed runs should be retained if the template lifecycle is immutable/tekton. Runs older than this (ordered by creation time) will be deleted. Setting higher values will increase memory footprint. If unspecified on immutable/tekton, default behavior will == {maxFailedRuns: 10, maxSuccessfulRuns: 10}'
                  properties:
                    maxFailedRuns:
                      description: MaxFailedRuns is the number of failed runs to retain.
                      format: int64
                      minimum: 1
                      type: integer
                    maxSuccessfulRuns:
                      description: MaxSuccessfulRuns is the number of successful runs to retain.
                      format: int64
                      minimum: 1
                      type: integer
                  required:
                    - maxFailedRuns
                    - maxSuccessfulRuns
                  type: object
                revisionPath:
                  description: 'RevisionPath is a path into the templated object''s data that contains a revision. The revision, along with the URL, represents the output of the Template. RevisionPath is specified in jsonpath format, eg: .status.artifact.revision'
                  type: string
                template:
                  description: 'Template defines a resource template for a Kubernetes Resource or Custom Resource which is applied to the server each time the blueprint is applied. Templates support simple value interpolation using the $()$ marker format. For more information, see: https://cartographer.sh/docs/latest/templating/ You cannot define both Template and Ytt at the same time. You should not define the namespace for the resource - it will automatically be created in the owner namespace. If the namespace is specified and is not the owner namespace, the resource will fail to be created.'
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                urlPath:
                  description: 'URLPath is a path into the templated object''s data that contains a URL. The URL, along with the revision, represents the output of the Template. URLPath is specified in jsonpath format, eg: .status.artifact.url'
                  type: string
                ytt:
                  description: 'Ytt defines a resource template written in `ytt` for a Kubernetes Resource or Custom Resource which is applied to the server each time the blueprint is applied. Templates support simple value interpolation using the $()$ marker format. For more information, see: https://cartographer.sh/docs/latest/templating/ You cannot define both Template and Ytt at the same time. You should not define the namespace for the resource - it will automatically be created in the owner namespace. If the namespace is specified and is not the owner namespace, the resource will fail to be created.'
                  type: string
              required:
                - revisionPath
                - urlPath
              type: object
          required:
            - metadata
            - spec
          type: object
      served: true
      storage: true
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: clustersupplychains.carto.run
  labels:
    app.kubernetes.io/component: cartographer
spec:
  group: carto.run
  names:
    kind: ClusterSupplyChain
    listKind: ClusterSupplyChainList
    plural: clustersupplychains
    shortNames:
      - csc
    singular: clustersupplychain
  scope: Cluster
  versions:
    - additionalPrinterColumns:
        - jsonPath: .status.conditions[?(@.type=='Ready')].status
          name: Ready
          type: string
        - jsonPath: .status.conditions[?(@.type=='Ready')].reason
          name: Reason
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1alpha1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: 'Spec describes the suppply chain. More info: https://cartographer.sh/docs/latest/reference/workload/#clustersupplychain'
              properties:
                params:
                  description: 'Additional parameters. See: https://cartographer.sh/docs/latest/architecture/#parameter-hierarchy'
                  items:
                    properties:
                      default:
                        description: DefaultValue of the parameter. Causes the parameter to be optional; If the Owner does not specify this parameter, this value is used.
                        x-kubernetes-preserve-unknown-fields: true
                      name:
                        description: Name of the parameter. Should match a template parameter name.
                        type: string
                      value:
                        description: Value of the parameter. If specified, owner properties are ignored.
                        x-kubernetes-preserve-unknown-fields: true
                    required:
                      - name
                    type: object
                  type: array
                resources:
                  description: Resources that are responsible for bringing the application to a deliverable state.
                  items:
                    properties:
                      configs:
                        description: "Configs is a list of references to other 'config' resources in this list. A config resource has the kind ClusterConfigTemplate \n In a template, configs can be consumed as: $(configs.<name>.config)$ \n If there is only one image, it can be consumed as: $(config)$"
                        items:
                          properties:
                            name:
                              type: string
                            resource:
                              type: string
                          required:
                            - name
                            - resource
                          type: object
                        type: array
                      images:
                        description: "Images is a list of references to other 'image' resources in this list. An image resource has the kind ClusterImageTemplate \n In a template, images can be consumed as: $(images.<name>.image)$ \n If there is only one image, it can be consumed as: $(image)$"
                        items:
                          properties:
                            name:
                              type: string
                            resource:
                              type: string
                          required:
                            - name
                            - resource
                          type: object
                        type: array
                      name:
                        description: Name of the resource. Used as a reference for inputs, as well as being the name presented in workload statuses to identify this resource.
                        type: string
                      params:
                        description: "Params are a list of parameters to provide to the template in TemplateRef Template params do not have to be specified here, unless you want to force a particular value, or add a default value. \n Parameters are consumed in a template with the syntax: $(params.<name>)$"
                        items:
                          properties:
                            default:
                              description: DefaultValue of the parameter. Causes the parameter to be optional; If the Owner does not specify this parameter, this value is used.
                              x-kubernetes-preserve-unknown-fields: true
                            name:
                              description: Name of the parameter. Should match a template parameter name.
                              type: string
                            value:
                              description: Value of the parameter. If specified, owner properties are ignored.
                              x-kubernetes-preserve-unknown-fields: true
                          required:
                            - name
                          type: object
                        type: array
                      sources:
                        description: "Sources is a list of references to other 'source' resources in this list. A source resource has the kind ClusterSourceTemplate \n In a template, sources can be consumed as: $(sources.<name>.url)$ and $(sources.<name>.revision)$ \n If there is only one source, it can be consumed as: $(source.url)$ and $(source.revision)$"
                        items:
                          properties:
                            name:
                              type: string
                            resource:
                              type: string
                          required:
                            - name
                            - resource
                          type: object
                        type: array
                      templateRef:
                        description: TemplateRef identifies the template used to produce this resource
                        properties:
                          kind:
                            description: Kind of the template to apply
                            enum:
                              - ClusterSourceTemplate
                              - ClusterImageTemplate
                              - ClusterTemplate
                              - ClusterConfigTemplate
                            type: string
                          name:
                            description: Name of the template to apply Only one of Name and Options can be specified.
                            minLength: 1
                            type: string
                          options:
                            description: Options is a list of template names and Selector. The templates must all be of type Kind. A template will be selected if the workload matches the specified selector. Only one template can be selected. Only one of Name and Options can be specified. Minimum number of items in list is two.
                            items:
                              properties:
                                name:
                                  description: Name of the template to apply Name or PassThrough must be specified
                                  minLength: 1
                                  type: string
                                passThrough:
                                  description: PassThrough the input Name or PassThrough must be specified
                                  type: string
                                selector:
                                  description: Selector is a criteria to match against  a workload or deliverable resource.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      items:
                                        description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                        properties:
                                          key:
                                            description: key is the label key that the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                          - key
                                          - operator
                                        type: object
                                      type: array
                                    matchFields:
                                      description: MatchFields is a list of field selector requirements. The requirements are ANDed.
                                      items:
                                        properties:
                                          key:
                                            description: 'Key is the JSON path in the workload to match against. e.g. for workload: "workload.spec.source.git.url", e.g. for deliverable: "deliverable.spec.source.git.url"'
                                            minLength: 1
                                            type: string
                                          operator:
                                            description: Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                            enum:
                                              - In
                                              - NotIn
                                              - Exists
                                              - DoesNotExist
                                            type: string
                                          values:
                                            description: Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                          - key
                                          - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                              required:
                                - selector
                              type: object
                            minItems: 2
                            type: array
                        required:
                          - kind
                        type: object
                    required:
                      - name
                      - templateRef
                    type: object
                  type: array
                selector:
                  additionalProperties:
                    type: string
                  description: 'Specifies the label key-value pairs used to select owners See: https://cartographer.sh/docs/v0.1.0/architecture/#selectors'
                  type: object
                selectorMatchExpressions:
                  description: 'Specifies the requirements used to select owners based on their labels See: https://cartographer.sh/docs/v0.1.0/architecture/#selectors'
                  items:
                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                    properties:
                      key:
                        description: key is the label key that the selector applies to.
                        type: string
                      operator:
                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                        type: string
                      values:
                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                        items:
                          type: string
                        type: array
                    required:
                      - key
                      - operator
                    type: object
                  type: array
                selectorMatchFields:
                  description: 'Specifies the requirements used to select owners based on their fields See: https://cartographer.sh/docs/v0.1.0/architecture/#selectors'
                  items:
                    properties:
                      key:
                        description: 'Key is the JSON path in the workload to match against. e.g. for workload: "workload.spec.source.git.url", e.g. for deliverable: "deliverable.spec.source.git.url"'
                        minLength: 1
                        type: string
                      operator:
                        description: Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                        enum:
                          - In
                          - NotIn
                          - Exists
                          - DoesNotExist
                        type: string
                      values:
                        description: Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.
                        items:
                          type: string
                        type: array
                    required:
                      - key
                      - operator
                    type: object
                  type: array
                serviceAccountRef:
                  description: "ServiceAccountName refers to the Service account with permissions to create resources submitted by the supply chain. \n If not set, Cartographer will use serviceAccountName from supply chain. \n If that is also not set, Cartographer will use the default service account in the workload's namespace."
                  properties:
                    name:
                      description: Name of the service account being referred to
                      type: string
                    namespace:
                      description: Namespace of the service account being referred to if omitted, the Owner's namespace is used.
                      type: string
                  required:
                    - name
                  type: object
              required:
                - resources
              type: object
            status:
              description: 'Status conforms to the Kubernetes conventions: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties'
              properties:
                conditions:
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                    properties:
                      lastTransitionTime:
                        description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: message is a human readable message indicating details about the transition. This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
                observedGeneration:
                  format: int64
                  type: integer
              type: object
          required:
            - metadata
            - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: clustertemplates.carto.run
  labels:
    app.kubernetes.io/component: cartographer
spec:
  group: carto.run
  names:
    kind: ClusterTemplate
    listKind: ClusterTemplateList
    plural: clustertemplates
    shortNames:
      - ct
    singular: clustertemplate
  scope: Cluster
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: 'Spec describes the template. More info: https://cartographer.sh/docs/latest/reference/template/#clustertemplate'
              properties:
                healthRule:
                  description: 'HealthRule specifies rubric for determining the health of a resource stamped by this template. See: https://cartographer.sh/docs/latest/health-rules/'
                  properties:
                    alwaysHealthy:
                      description: AlwaysHealthy being set indicates the resource should always be considered healthy once it exists.
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    multiMatch:
                      description: MultiMatch specifies explicitly which conditions and/or fields should be used to determine healthiness.
                      properties:
                        healthy:
                          description: Healthy is a HealthMatchRule which stipulates requirements, ALL of which must be met for the resource to be considered healthy.
                          properties:
                            matchConditions:
                              description: MatchConditions are the conditions and statuses to read.
                              items:
                                properties:
                                  status:
                                    description: Status is the status of the condition
                                    type: string
                                  type:
                                    description: Type is the type of the condition
                                    type: string
                                required:
                                  - status
                                  - type
                                type: object
                              type: array
                            matchFields:
                              description: MatchFields stipulates a FieldSelectorRequirement for this rule.
                              items:
                                properties:
                                  key:
                                    description: 'Key is the JSON path in the workload to match against. e.g. for workload: "workload.spec.source.git.url", e.g. for deliverable: "deliverable.spec.source.git.url"'
                                    minLength: 1
                                    type: string
                                  messagePath:
                                    description: MessagePath is specified in jsonpath format. It is evaluated against the resource to provide a message in the owner's resource condition if it is the first matching requirement that determine the current ResourcesHealthy condition status.
                                    type: string
                                  operator:
                                    description: Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    enum:
                                      - In
                                      - NotIn
                                      - Exists
                                      - DoesNotExist
                                    type: string
                                  values:
                                    description: Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.
                                    items:
                                      type: string
                                    type: array
                                required:
                                  - key
                                  - operator
                                type: object
                              type: array
                          type: object
                        unhealthy:
                          description: Unhealthy is a HealthMatchRule which stipulates requirements, ANY of which, when met, indicate that the resource should be considered unhealthy.
                          properties:
                            matchConditions:
                              description: MatchConditions are the conditions and statuses to read.
                              items:
                                properties:
                                  status:
                                    description: Status is the status of the condition
                                    type: string
                                  type:
                                    description: Type is the type of the condition
                                    type: string
                                required:
                                  - status
                                  - type
                                type: object
                              type: array
                            matchFields:
                              description: MatchFields stipulates a FieldSelectorRequirement for this rule.
                              items:
                                properties:
                                  key:
                                    description: 'Key is the JSON path in the workload to match against. e.g. for workload: "workload.spec.source.git.url", e.g. for deliverable: "deliverable.spec.source.git.url"'
                                    minLength: 1
                                    type: string
                                  messagePath:
                                    description: MessagePath is specified in jsonpath format. It is evaluated against the resource to provide a message in the owner's resource condition if it is the first matching requirement that determine the current ResourcesHealthy condition status.
                                    type: string
                                  operator:
                                    description: Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    enum:
                                      - In
                                      - NotIn
                                      - Exists
                                      - DoesNotExist
                                    type: string
                                  values:
                                    description: Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.
                                    items:
                                      type: string
                                    type: array
                                required:
                                  - key
                                  - operator
                                type: object
                              type: array
                          type: object
                      required:
                        - healthy
                        - unhealthy
                      type: object
                    singleConditionType:
                      description: SingleConditionType names a single condition which, when True indicates the resource is healthy. When False it is unhealthy. Otherwise, healthiness is Unknown.
                      type: string
                  type: object
                lifecycle:
                  default: mutable
                  description: 'Lifecycle specifies whether template modifications should result in originally created objects being updated (`mutable`) or in new objects created alongside original objects (`immutable` or `tekton`). See: https://cartographer.sh/docs/latest/lifecycle/'
                  enum:
                    - mutable
                    - immutable
                    - tekton
                  type: string
                params:
                  description: 'Additional parameters. See: https://cartographer.sh/docs/latest/architecture/#parameter-hierarchy'
                  items:
                    properties:
                      default:
                        description: DefaultValue of the parameter. Causes the parameter to be optional; If the Owner or Template does not specify this parameter, this value is used.
                        x-kubernetes-preserve-unknown-fields: true
                      name:
                        description: Name of a parameter the template accepts from the Blueprint or Owner.
                        type: string
                    required:
                      - default
                      - name
                    type: object
                  type: array
                retentionPolicy:
                  description: 'RetentionPolicy specifies how many successful and failed runs should be retained if the template lifecycle is immutable/tekton. Runs older than this (ordered by creation time) will be deleted. Setting higher values will increase memory footprint. If unspecified on immutable/tekton, default behavior will == {maxFailedRuns: 10, maxSuccessfulRuns: 10}'
                  properties:
                    maxFailedRuns:
                      description: MaxFailedRuns is the number of failed runs to retain.
                      format: int64
                      minimum: 1
                      type: integer
                    maxSuccessfulRuns:
                      description: MaxSuccessfulRuns is the number of successful runs to retain.
                      format: int64
                      minimum: 1
                      type: integer
                  required:
                    - maxFailedRuns
                    - maxSuccessfulRuns
                  type: object
                template:
                  description: 'Template defines a resource template for a Kubernetes Resource or Custom Resource which is applied to the server each time the blueprint is applied. Templates support simple value interpolation using the $()$ marker format. For more information, see: https://cartographer.sh/docs/latest/templating/ You cannot define both Template and Ytt at the same time. You should not define the namespace for the resource - it will automatically be created in the owner namespace. If the namespace is specified and is not the owner namespace, the resource will fail to be created.'
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                ytt:
                  description: 'Ytt defines a resource template written in `ytt` for a Kubernetes Resource or Custom Resource which is applied to the server each time the blueprint is applied. Templates support simple value interpolation using the $()$ marker format. For more information, see: https://cartographer.sh/docs/latest/templating/ You cannot define both Template and Ytt at the same time. You should not define the namespace for the resource - it will automatically be created in the owner namespace. If the namespace is specified and is not the owner namespace, the resource will fail to be created.'
                  type: string
              type: object
          required:
            - metadata
            - spec
          type: object
      served: true
      storage: true
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: deliverables.carto.run
  labels:
    app.kubernetes.io/component: cartographer
spec:
  group: carto.run
  names:
    categories:
      - all
    kind: Deliverable
    listKind: DeliverableList
    plural: deliverables
    shortNames:
      - dlv
    singular: deliverable
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .spec.source['git.url','image']
          name: Source
          type: string
        - jsonPath: .status.deliveryRef.name
          name: Delivery
          type: string
        - jsonPath: .status.conditions[?(@.type=='Ready')].status
          name: Ready
          type: string
        - jsonPath: .status.conditions[?(@.type=='Ready')].reason
          name: Reason
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1alpha1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: 'Spec describes the deliverable. More info: https://cartographer.sh/docs/latest/reference/workload/#deliverable'
              properties:
                params:
                  description: 'Additional parameters. See: https://cartographer.sh/docs/latest/architecture/#parameter-hierarchy'
                  items:
                    properties:
                      name:
                        description: Name of the parameter. Should match a blueprint or template parameter name.
                        type: string
                      value:
                        description: Value of the parameter.
                        x-kubernetes-preserve-unknown-fields: true
                    required:
                      - name
                      - value
                    type: object
                  type: array
                serviceAccountName:
                  description: "ServiceAccountName refers to the Service account with permissions to create resources submitted by the supply chain. \n If not set, Cartographer will use serviceAccountName from delivery. \n If that is also not set, Cartographer will use the default service account in the deliverable's namespace."
                  type: string
                source:
                  description: The location of the source code for the workload. Specify one of `spec.source` or `spec.image`
                  properties:
                    git:
                      description: Source code location in a git repository.
                      properties:
                        ref:
                          properties:
                            branch:
                              type: string
                            commit:
                              type: string
                            tag:
                              type: string
                          type: object
                        url:
                          type: string
                      type: object
                    image:
                      description: OCI Image in a repository, containing the source code to be used throughout the supply chain.
                      type: string
                    subPath:
                      description: Subpath inside the Git repository or Image to treat as the root of the application. Defaults to the root if left empty.
                      type: string
                  type: object
              type: object
            status:
              description: 'Status conforms to the Kubernetes conventions: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties'
              properties:
                conditions:
                  description: 'Conditions describing this resource''s reconcile state. The top level condition is of type `Ready`, and follows these Kubernetes conventions: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties'
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                    properties:
                      lastTransitionTime:
                        description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: message is a human readable message indicating details about the transition. This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
                deliveryRef:
                  description: DeliveryRef is the Delivery resource that was used when this status was set.
                  properties:
                    apiVersion:
                      type: string
                    kind:
                      type: string
                    name:
                      type: string
                    namespace:
                      type: string
                  type: object
                observedGeneration:
                  description: ObservedGeneration refers to the metadata.Generation of the spec that resulted in the current `status`.
                  format: int64
                  type: integer
                resources:
                  description: Resources contain references to the objects created by the Delivery and the templates used to create them. It also contains Inputs and Outputs that were passed between the templates as the Delivery was processed.
                  items:
                    properties:
                      conditions:
                        description: 'Conditions describing this resource''s reconcile state. The top level condition is of type `Ready`, and follows these Kubernetes conventions: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties'
                        items:
                          description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                          properties:
                            lastTransitionTime:
                              description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                              format: date-time
                              type: string
                            message:
                              description: message is a human readable message indicating details about the transition. This may be an empty string.
                              maxLength: 32768
                              type: string
                            observedGeneration:
                              description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                              format: int64
                              minimum: 0
                              type: integer
                            reason:
                              description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                              maxLength: 1024
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                              type: string
                            status:
                              description: status of the condition, one of True, False, Unknown.
                              enum:
                                - "True"
                                - "False"
                                - Unknown
                              type: string
                            type:
                              description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                              maxLength: 316
                              pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                              type: string
                          required:
                            - lastTransitionTime
                            - message
                            - reason
                            - status
                            - type
                          type: object
                        type: array
                      inputs:
                        description: Inputs are references to resources that were used to template the object in StampedRef
                        items:
                          properties:
                            name:
                              description: Name is the name of the resource in the blueprint whose output the resource consumes as an input
                              type: string
                          required:
                            - name
                          type: object
                        type: array
                      name:
                        description: Name is the name of the resource in the blueprint
                        type: string
                      outputs:
                        description: Outputs are values from the object in StampedRef that can be consumed by other resources
                        items:
                          properties:
                            digest:
                              description: Digest is a sha256 of the full value of the output
                              type: string
                            lastTransitionTime:
                              description: LastTransitionTime is a timestamp of the last time the value changed
                              format: date-time
                              type: string
                            name:
                              description: Name is the output type generated from the resource [url, revision, image or config]
                              type: string
                            preview:
                              description: Preview is a preview of the value of the output
                              type: string
                          required:
                            - digest
                            - lastTransitionTime
                            - name
                            - preview
                          type: object
                        type: array
                      stampedRef:
                        description: StampedRef is a reference to the object that was created by the resource
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resource:
                            description: Resource refers to the resource name and group [NAME(.GROUP)] The NAME segment is the CRD's plural value. You can use this to fully qualify a kubectl reference.
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                      templateRef:
                        description: TemplateRef is a reference to the template used to create the object in StampedRef
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                    required:
                      - name
                    type: object
                  type: array
              type: object
          required:
            - metadata
            - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: runnables.carto.run
  labels:
    app.kubernetes.io/component: cartographer
spec:
  group: carto.run
  names:
    kind: Runnable
    listKind: RunnableList
    plural: runnables
    shortNames:
      - run
    singular: runnable
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .status.conditions[?(@.type=='Ready')].status
          name: Ready
          type: string
        - jsonPath: .status.conditions[?(@.type=='Ready')].reason
          name: Reason
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1alpha1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: 'Spec describes the runnable. More info: https://cartographer.sh/docs/latest/reference/runnable/#runnable'
              properties:
                inputs:
                  additionalProperties:
                    x-kubernetes-preserve-unknown-fields: true
                  description: 'Inputs are key/values providing inputs to the templated object created for this runnable. Reference inputs in the template using the jsonPath: $(runnable.spec.inputs.<key>)$'
                  type: object
                retentionPolicy:
                  default:
                    maxFailedRuns: 10
                    maxSuccessfulRuns: 10
                  description: RetentionPolicy specifies how many successful and failed runs should be retained. Runs older than this (ordered by creation time) will be deleted. Setting higher values will increase memory footprint.
                  properties:
                    maxFailedRuns:
                      description: MaxFailedRuns is the number of failed runs to retain.
                      format: int64
                      minimum: 1
                      type: integer
                    maxSuccessfulRuns:
                      description: MaxSuccessfulRuns is the number of successful runs to retain.
                      format: int64
                      minimum: 1
                      type: integer
                  required:
                    - maxFailedRuns
                    - maxSuccessfulRuns
                  type: object
                runTemplateRef:
                  description: RunTemplateRef identifies the run template used to produce resources for this runnable.
                  properties:
                    kind:
                      type: string
                    name:
                      minLength: 1
                      type: string
                  required:
                    - name
                  type: object
                selector:
                  description: 'Selector refers to an additional object that the template can refer to using: $(selected)$.'
                  properties:
                    matchingLabels:
                      additionalProperties:
                        type: string
                      description: MatchingLabels must match on a single target object, making the object available in the template as $(selected)$
                      type: object
                    resource:
                      description: Resource is the GVK that must match the selected object.
                      properties:
                        apiVersion:
                          type: string
                        kind:
                          type: string
                      type: object
                  required:
                    - matchingLabels
                    - resource
                  type: object
                serviceAccountName:
                  description: "ServiceAccountName refers to the Service account with permissions to create resources submitted by the ClusterRunTemplate. \n If not set, Cartographer will use the default service account in the runnable's namespace."
                  type: string
              required:
                - runTemplateRef
              type: object
            status:
              description: 'Status conforms to the Kubernetes conventions: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties'
              properties:
                conditions:
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                    properties:
                      lastTransitionTime:
                        description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: message is a human readable message indicating details about the transition. This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
                observedGeneration:
                  format: int64
                  type: integer
                outputs:
                  additionalProperties:
                    x-kubernetes-preserve-unknown-fields: true
                  description: 'Note: outputs are only filled on the runnable when the templated object has a Succeeded condition with a Status of True E.g:     status.conditions[?(@.type=="Succeeded")].status == True a runnable creating an object without a Succeeded condition (like a Job or ConfigMap) will never display an output'
                  type: object
              type: object
          required:
            - metadata
            - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: workloads.carto.run
  labels:
    app.kubernetes.io/component: cartographer
spec:
  group: carto.run
  names:
    categories:
      - all
    kind: Workload
    listKind: WorkloadList
    plural: workloads
    shortNames:
      - wld
    singular: workload
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .spec.source['git.url','image']
          name: Source
          type: string
        - jsonPath: .status.supplyChainRef.name
          name: SupplyChain
          type: string
        - jsonPath: .status.conditions[?(@.type=='Ready')].status
          name: Ready
          type: string
        - jsonPath: .status.conditions[?(@.type=='Ready')].reason
          name: Reason
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1alpha1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: 'Spec describes the workload. More info: https://cartographer.sh/docs/latest/reference/workload/#workload'
              properties:
                build:
                  description: Build configuration, for the build resources in the supply chain
                  properties:
                    env:
                      description: Env is an array of environment variables to propagate to build resources in the supply chain. See https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/
                      items:
                        description: EnvVar represents an environment variable present in a Container.
                        properties:
                          name:
                            description: Name of the environment variable. Must be a C_IDENTIFIER.
                            type: string
                          value:
                            description: 'Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".'
                            type: string
                          valueFrom:
                            description: Source for the environment variable's value. Cannot be used if value is not empty.
                            properties:
                              configMapKeyRef:
                                description: Selects a key of a ConfigMap.
                                properties:
                                  key:
                                    description: The key to select.
                                    type: string
                                  name:
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                    type: string
                                  optional:
                                    description: Specify whether the ConfigMap or its key must be defined
                                    type: boolean
                                required:
                                  - key
                                type: object
                                x-kubernetes-map-type: atomic
                              fieldRef:
                                description: 'Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels[''<KEY>'']`, `metadata.annotations[''<KEY>'']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.'
                                properties:
                                  apiVersion:
                                    description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                    type: string
                                  fieldPath:
                                    description: Path of the field to select in the specified API version.
                                    type: string
                                required:
                                  - fieldPath
                                type: object
                                x-kubernetes-map-type: atomic
                              resourceFieldRef:
                                description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.'
                                properties:
                                  containerName:
                                    description: 'Container name: required for volumes, optional for env vars'
                                    type: string
                                  divisor:
                                    anyOf:
                                      - type: integer
                                      - type: string
                                    description: Specifies the output format of the exposed resources, defaults to "1"
                                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                    x-kubernetes-int-or-string: true
                                  resource:
                                    description: 'Required: resource to select'
                                    type: string
                                required:
                                  - resource
                                type: object
                                x-kubernetes-map-type: atomic
                              secretKeyRef:
                                description: Selects a key of a secret in the pod's namespace
                                properties:
                                  key:
                                    description: The key of the secret to select from.  Must be a valid secret key.
                                    type: string
                                  name:
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                    type: string
                                  optional:
                                    description: Specify whether the Secret or its key must be defined
                                    type: boolean
                                required:
                                  - key
                                type: object
                                x-kubernetes-map-type: atomic
                            type: object
                        required:
                          - name
                        type: object
                      type: array
                  type: object
                env:
                  description: Environment variables to be passed to the main container running the application. See https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/
                  items:
                    description: EnvVar represents an environment variable present in a Container.
                    properties:
                      name:
                        description: Name of the environment variable. Must be a C_IDENTIFIER.
                        type: string
                      value:
                        description: 'Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".'
                        type: string
                      valueFrom:
                        description: Source for the environment variable's value. Cannot be used if value is not empty.
                        properties:
                          configMapKeyRef:
                            description: Selects a key of a ConfigMap.
                            properties:
                              key:
                                description: The key to select.
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                type: string
                              optional:
                                description: Specify whether the ConfigMap or its key must be defined
                                type: boolean
                            required:
                              - key
                            type: object
                            x-kubernetes-map-type: atomic
                          fieldRef:
                            description: 'Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels[''<KEY>'']`, `metadata.annotations[''<KEY>'']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.'
                            properties:
                              apiVersion:
                                description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
                                type: string
                              fieldPath:
                                description: Path of the field to select in the specified API version.
                                type: string
                            required:
                              - fieldPath
                            type: object
                            x-kubernetes-map-type: atomic
                          resourceFieldRef:
                            description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.'
                            properties:
                              containerName:
                                description: 'Container name: required for volumes, optional for env vars'
                                type: string
                              divisor:
                                anyOf:
                                  - type: integer
                                  - type: string
                                description: Specifies the output format of the exposed resources, defaults to "1"
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              resource:
                                description: 'Required: resource to select'
                                type: string
                            required:
                              - resource
                            type: object
                            x-kubernetes-map-type: atomic
                          secretKeyRef:
                            description: Selects a key of a secret in the pod's namespace
                            properties:
                              key:
                                description: The key of the secret to select from.  Must be a valid secret key.
                                type: string
                              name:
                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                type: string
                              optional:
                                description: Specify whether the Secret or its key must be defined
                                type: boolean
                            required:
                              - key
                            type: object
                            x-kubernetes-map-type: atomic
                        type: object
                    required:
                      - name
                    type: object
                  type: array
                image:
                  description: Image refers to a pre-built image in a registry. It is an alternative to specifying the location of source code for the workload. Specify one of `spec.source` or `spec.image`.
                  type: string
                params:
                  description: 'Additional parameters. See: https://cartographer.sh/docs/latest/architecture/#parameter-hierarchy'
                  items:
                    properties:
                      name:
                        description: Name of the parameter. Should match a blueprint or template parameter name.
                        type: string
                      value:
                        description: Value of the parameter.
                        x-kubernetes-preserve-unknown-fields: true
                    required:
                      - name
                      - value
                    type: object
                  type: array
                resources:
                  description: Resource constraints for the application. See https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                  properties:
                    limits:
                      additionalProperties:
                        anyOf:
                          - type: integer
                          - type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                      type: object
                    requests:
                      additionalProperties:
                        anyOf:
                          - type: integer
                          - type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                      type: object
                  type: object
                serviceAccountName:
                  description: "ServiceAccountName refers to the Service account with permissions to create resources submitted by the supply chain. \n If not set, Cartographer will use serviceAccountName from supply chain. \n If that is also not set, Cartographer will use the default service account in the workload's namespace."
                  type: string
                serviceClaims:
                  description: ServiceClaims to be bound through ServiceBindings.
                  items:
                    properties:
                      name:
                        type: string
                      ref:
                        properties:
                          apiVersion:
                            type: string
                          kind:
                            type: string
                          name:
                            type: string
                        required:
                          - apiVersion
                          - kind
                          - name
                        type: object
                    required:
                      - name
                    type: object
                  type: array
                source:
                  description: The location of the source code for the workload. Specify one of `spec.source` or `spec.image`
                  properties:
                    git:
                      description: Source code location in a git repository.
                      properties:
                        ref:
                          properties:
                            branch:
                              type: string
                            commit:
                              type: string
                            tag:
                              type: string
                          type: object
                        url:
                          type: string
                      type: object
                    image:
                      description: OCI Image in a repository, containing the source code to be used throughout the supply chain.
                      type: string
                    subPath:
                      description: Subpath inside the Git repository or Image to treat as the root of the application. Defaults to the root if left empty.
                      type: string
                  type: object
              type: object
            status:
              description: 'Status conforms to the Kubernetes conventions: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties'
              properties:
                conditions:
                  description: 'Conditions describing this resource''s reconcile state. The top level condition is of type `Ready`, and follows these Kubernetes conventions: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties'
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                    properties:
                      lastTransitionTime:
                        description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: message is a human readable message indicating details about the transition. This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
                observedGeneration:
                  description: ObservedGeneration refers to the metadata.Generation of the spec that resulted in the current `status`.
                  format: int64
                  type: integer
                resources:
                  description: Resources contain references to the objects created by the Supply Chain and the templates used to create them. It also contains Inputs and Outputs that were passed between the templates as the Supply Chain was processed.
                  items:
                    properties:
                      conditions:
                        description: 'Conditions describing this resource''s reconcile state. The top level condition is of type `Ready`, and follows these Kubernetes conventions: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties'
                        items:
                          description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                          properties:
                            lastTransitionTime:
                              description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                              format: date-time
                              type: string
                            message:
                              description: message is a human readable message indicating details about the transition. This may be an empty string.
                              maxLength: 32768
                              type: string
                            observedGeneration:
                              description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                              format: int64
                              minimum: 0
                              type: integer
                            reason:
                              description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                              maxLength: 1024
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                              type: string
                            status:
                              description: status of the condition, one of True, False, Unknown.
                              enum:
                                - "True"
                                - "False"
                                - Unknown
                              type: string
                            type:
                              description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                              maxLength: 316
                              pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                              type: string
                          required:
                            - lastTransitionTime
                            - message
                            - reason
                            - status
                            - type
                          type: object
                        type: array
                      inputs:
                        description: Inputs are references to resources that were used to template the object in StampedRef
                        items:
                          properties:
                            name:
                              description: Name is the name of the resource in the blueprint whose output the resource consumes as an input
                              type: string
                          required:
                            - name
                          type: object
                        type: array
                      name:
                        description: Name is the name of the resource in the blueprint
                        type: string
                      outputs:
                        description: Outputs are values from the object in StampedRef that can be consumed by other resources
                        items:
                          properties:
                            digest:
                              description: Digest is a sha256 of the full value of the output
                              type: string
                            lastTransitionTime:
                              description: LastTransitionTime is a timestamp of the last time the value changed
                              format: date-time
                              type: string
                            name:
                              description: Name is the output type generated from the resource [url, revision, image or config]
                              type: string
                            preview:
                              description: Preview is a preview of the value of the output
                              type: string
                          required:
                            - digest
                            - lastTransitionTime
                            - name
                            - preview
                          type: object
                        type: array
                      stampedRef:
                        description: StampedRef is a reference to the object that was created by the resource
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resource:
                            description: Resource refers to the resource name and group [NAME(.GROUP)] The NAME segment is the CRD's plural value. You can use this to fully qualify a kubectl reference.
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                      templateRef:
                        description: TemplateRef is a reference to the template used to create the object in StampedRef
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                    required:
                      - name
                    type: object
                  type: array
                supplyChainRef:
                  description: SupplyChainRef is the Supply Chain resource that was used when this status was set.
                  properties:
                    apiVersion:
                      type: string
                    kind:
                      type: string
                    name:
                      type: string
                    namespace:
                      type: string
                  type: object
              type: object
          required:
            - metadata
            - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: v1
kind: Namespace
metadata:
  name: cartographer-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cartographer-controller
  namespace: cartographer-system
  labels:
    app.kubernetes.io/name: cartographer-controller
    app.kubernetes.io/version: v0.8.2
    app.kubernetes.io/component: cartographer
spec:
  selector:
    matchLabels:
      app: cartographer-controller
  replicas: 1
  template:
    metadata:
      labels:
        app: cartographer-controller
    spec:
      serviceAccount: cartographer-controller
      volumes:
        - name: cert
          secret:
            defaultMode: 420
            secretName: cartographer-webhook
      containers:
        - name: cartographer-controller
          image: projectcartographer/cartographer@sha256:f9ec1a451ee7c0294dbf4de94d869f9b06d5a9eeaea39696a35b6faa77762548
          args:
            - -cert-dir=/cert
            - -metrics-port=9998
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - mountPath: /cert
              name: cert
              readOnly: true
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 512Mi
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9998"
    prometheus.io/scheme: http
    prometheus.io/scrape: "true"
  name: cartographer-controller-metrics-service
  namespace: cartographer-system
  labels:
    app.kubernetes.io/component: cartographer
spec:
  ports:
    - port: 9998
      targetPort: 9998
  selector:
    app: cartographer-controller
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cartographer-controller
  namespace: cartographer-system
  labels:
    app.kubernetes.io/component: cartographer
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cartographer-cluster-admin
  labels:
    app.kubernetes.io/component: cartographer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cartographer-controller-admin
subjects:
  - kind: ServiceAccount
    name: cartographer-controller
    namespace: cartographer-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cartographer-controller-admin
  labels:
    app.kubernetes.io/component: cartographer
rules:
  - apiGroups:
      - ""
    resources:
      - serviceaccounts/token
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - carto.run
    resources:
      - workloads/status
      - clustersupplychains/status
      - runnables/status
      - clusterdeliveries/status
      - deliverables/status
    verbs:
      - create
      - update
      - delete
      - patch
  - apiGroups:
      - '*'
    resources:
      - '*'
    verbs:
      - watch
      - get
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cartographer-user-admin
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    app.kubernetes.io/component: cartographer
rules:
  - apiGroups:
      - carto.run
    resources:
      - workloads
      - deliverables
    verbs:
      - create
      - update
      - patch
      - delete
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cartographer-user-view
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
    app.kubernetes.io/component: cartographer
rules:
  - apiGroups:
      - carto.run
    resources:
      - workloads
      - deliverables
    verbs:
      - get
      - list
      - watch
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  creationTimestamp: null
  name: cartographer-validating-webhook-configuration
  annotations:
    cert-manager.io/inject-ca-from: cartographer-system/cartographer-webhook
  labels:
    app.kubernetes.io/component: cartographer
webhooks:
  - admissionReviewVersions:
      - v1beta1
      - v1
    clientConfig:
      service:
        name: cartographer-webhook
        namespace: cartographer-system
        path: /validate-carto-run-v1alpha1-clusterconfigtemplate
    failurePolicy: Fail
    name: config-template-validator.cartographer.com
    rules:
      - apiGroups:
          - carto.run
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - clusterconfigtemplates
        scope: Cluster
    sideEffects: None
  - admissionReviewVersions:
      - v1beta1
      - v1
    clientConfig:
      service:
        name: cartographer-webhook
        namespace: cartographer-system
        path: /validate-carto-run-v1alpha1-clusterdelivery
    failurePolicy: Fail
    name: delivery-validator.cartographer.com
    rules:
      - apiGroups:
          - carto.run
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - clusterdeliveries
        scope: Cluster
    sideEffects: None
  - admissionReviewVersions:
      - v1beta1
      - v1
    clientConfig:
      service:
        name: cartographer-webhook
        namespace: cartographer-system
        path: /validate-carto-run-v1alpha1-clusterdeploymenttemplate
    failurePolicy: Fail
    name: deployment-template-validator.cartographer.com
    rules:
      - apiGroups:
          - carto.run
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - clusterdeploymenttemplates
        scope: Cluster
    sideEffects: None
  - admissionReviewVersions:
      - v1beta1
      - v1
    clientConfig:
      service:
        name: cartographer-webhook
        namespace: cartographer-system
        path: /validate-carto-run-v1alpha1-clusterimagetemplate
    failurePolicy: Fail
    name: image-template-validator.cartographer.com
    rules:
      - apiGroups:
          - carto.run
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - clusterimagetemplates
        scope: Cluster
    sideEffects: None
  - admissionReviewVersions:
      - v1beta1
      - v1
    clientConfig:
      service:
        name: cartographer-webhook
        namespace: cartographer-system
        path: /validate-carto-run-v1alpha1-clusterruntemplate
    failurePolicy: Fail
    name: run-template-validator.cartographer.com
    rules:
      - apiGroups:
          - carto.run
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - clusterruntemplates
        scope: Cluster
    sideEffects: None
  - admissionReviewVersions:
      - v1beta1
      - v1
    clientConfig:
      service:
        name: cartographer-webhook
        namespace: cartographer-system
        path: /validate-carto-run-v1alpha1-clustersourcetemplate
    failurePolicy: Fail
    name: source-template-validator.cartographer.com
    rules:
      - apiGroups:
          - carto.run
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - clustersourcetemplates
        scope: Cluster
    sideEffects: None
  - admissionReviewVersions:
      - v1beta1
      - v1
    clientConfig:
      service:
        name: cartographer-webhook
        namespace: cartographer-system
        path: /validate-carto-run-v1alpha1-clustersupplychain
    failurePolicy: Fail
    name: supply-chain-validator.cartographer.com
    rules:
      - apiGroups:
          - carto.run
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - clustersupplychains
        scope: Cluster
    sideEffects: None
  - admissionReviewVersions:
      - v1beta1
      - v1
    clientConfig:
      service:
        name: cartographer-webhook
        namespace: cartographer-system
        path: /validate-carto-run-v1alpha1-clustertemplate
    failurePolicy: Fail
    name: template-validator.cartographer.com
    rules:
      - apiGroups:
          - carto.run
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - clustertemplates
        scope: Cluster
    sideEffects: None
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: cartographer-webhook
  namespace: cartographer-system
  labels:
    app.kubernetes.io/component: cartographer
spec:
  commonName: cartographer-webhook.cartographer-system.svc
  dnsNames:
    - cartographer-webhook.cartographer-system.svc
    - cartographer-webhook.cartographer-system.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: cartographer-selfsigned-issuer
  secretName: cartographer-webhook
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: cartographer-selfsigned-issuer
  namespace: cartographer-system
  labels:
    app.kubernetes.io/component: cartographer
spec:
  selfSigned: {}
---
apiVersion: v1
kind: Service
metadata:
  name: cartographer-webhook
  namespace: cartographer-system
  labels:
    app.kubernetes.io/component: cartographer
spec:
  ports:
    - port: 443
      targetPort: 9443
  selector:
    app: cartographer-controller

---
